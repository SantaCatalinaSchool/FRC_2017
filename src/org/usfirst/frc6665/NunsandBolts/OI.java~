// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6665.NunsandBolts;

import org.usfirst.frc6665.NunsandBolts.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton joystickButton1;
    public JoystickButton joystickButton2;
    public JoystickButton joystickButton3;
    public Joystick joystick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        joystick = new Joystick(2);
        
        joystickButton3 = new JoystickButton(joystick, 3);
        joystickButton3.whileHeld(new Shooter_Start());
        joystickButton2 = new JoystickButton(joystick, 2);
        joystickButton2.whileHeld(new DriveTrain_JoystickDrive());
        joystickButton1 = new JoystickButton(joystick, 1);
        joystickButton1.whileHeld(new Agitator_Stop());


        // SmartDashboard Buttons
        SmartDashboard.putData("Agitator_Start", new Agitator_Start());
        SmartDashboard.putData("Agitator_Stop", new Agitator_Stop());
        SmartDashboard.putData("DriveTrain_JoystickDrive", new DriveTrain_JoystickDrive());
        SmartDashboard.putData("Shooter_Start", new Shooter_Start());
        SmartDashboard.putData("Shooter_Stop", new Shooter_Stop());
        SmartDashboard.putData("DriveTrain_Autonomous", new DriveTrain_Autonomous());
        SmartDashboard.putData("Collector_Start", new Collector_Start());
        SmartDashboard.putData("Collector_Stop", new Collector_Stop());
        SmartDashboard.putData("Camera_Start", new Camera_Start());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick() {
        return joystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

